var express = require('express');
var router = express.Router();
var BankOperation = require('../models/bankoperation');

// Create a new debt
router.post('/bankoperations', function(req, res, next) {
    /*
     `BankOperation.create` will send a request to the Data System in order to create
     a new document of type "BankOperation".
     `req.body` is the request's body, it is here assumed that it exists and
     is a valid JavaScript object, matching the schema defined in the model.
     */
    BankOperation.create(req.body, function(err, debt) {
        if(err) {
            /*
             If an unexpected error occurs, forward it to Express error
             middleware which will send the error properly formatted.
             */
            next(err);
        } else {
            /*
             If everything went well, send the newly created debt with the
             correct HTTP status.
             */
            res.status(201).send(debt);
        }
    });
});


// Fetch an existing debt
router.get('/bankoperations/:id', function(req, res, next) {
    /*
     `BankOperation.find` sends a request to the Data System to fetch the document
     whose ID is given as a parameter.
     `req.params.id` is automatically generated by Express, based on the
     route defined above.
     */
    BankOperation.find(req.params.id, function(err, debt) {
        if(err) {
            /*
             If an unexpected error occurs, forward it to Express error
             middleware which will send the error properly formatted.
             */
            next(err);
        } else {
            /*
             If everything went well, send the fetched debt with the correct
             HTTP status.
             */
            res.status(200).send(debt);
        }
    });
});


// Update an existing debt
router.put('/bankoperations/:id', function(req, res, next) {
    /*
     First, get the document we want to update.
     */
    BankOperation.find(req.params.id, function(err, debt) {
        if(err) {
            /*
             If an unexpected error occurs, forward it to Express error
             middleware which will send the error properly formatted.
             */
            next(err);
        } else if(!debt) {
            /*
             If there was no unexpected error, but that the document has not
             been found, send the legitimate status code. `debt` is null.
             */
            res.sendStatus(404);
        } else {
            /*
             `BankOperation.updateAttributes` sends a request to the Data System to
             update the document, given its ID and the fields to update.
             */
            debt.updateAttributes(req.body, function(err, debt) {
                if(err) {
                    /*
                     If an unexpected error occurs, forward it to Express
                     error middleware which will send the error properly
                     formatted.
                     */
                    next(err);
                } else {
                    /*
                     If everything went well, send the fetched debt with the
                     correct HTTP status.
                     */
                    res.status(200).send(debt);
                }
            });
        }

    });
});


// Remove an existing debt
router.delete('/bankoperations/:id', function(req, res, next) {
    /*
     `BankOperation.destroy` sends a request to the Data System to update
     the document, given its ID.
     */
    BankOperation.destroy(req.params.id, function(err) {
        if(err) {
            /*
             If an unexpected error occurs, forward it to Express error
             middleware which will send the error properly formatted.
             */
            next(err);
        } else {
            /*
             If everything went well, send an empty response with the correct
             HTTP status.
             */
            res.sendStatus(204);
        }
    });
});


// List of all bankoperations, for a given creditor
router.get('/bankoperations', function(req, res, next) {
    /*
     `BankOperation.request` asks the data system to request a CouchDB view, given its
     name.
     */
    BankOperation.request('all', function(err, bankoperations) {
        if(err) {
            /*
             If an unexpected error occurs, forward it to Express error
             middleware which will send the error properly formatted.
             */
            next(err);
        } else {
            /*
             If everything went well, send the list of documents with the
             correct HTTP status code and content type.
             */
            res.status(200).json(bankoperations);
        }
    });
});

// List of all bankoperations, for a given creditor
router.get('/get_operations', function(req, res, next) {
    /*
     `BankOperation.request` asks the data system to request a CouchDB view, given its
     name.
     */

    BankOperation.request('all', function(err, bankoperations) {
        if(err) {
            /*
             If an unexpected error occurs, forward it to Express error
             middleware which will send the error properly formatted.
             */
            next(err);
        } else {
            /*
             If everything went well, send the list of documents with the
             correct HTTP status code and content type.
             */

            var obj = {};
            for (var i = 0; i < bankoperations.length; i++) {
                var count = 1;
                var min = 0;
                var max = 0;



                if (typeof obj[bankoperations[i].raw] !== "undefined") {
                    count = obj[bankoperations[i].raw].count + 1; // si l'opération existe déjà dans la variable "obj", on incrémente "count" de l'operation


                    // On compare le min et le max
                     if(bankoperations[i].amount < min){
                         obj[bankoperations[i].raw].min = bankoperations[i].amount;
                         obj[bankoperations[i].raw].max = obj[bankoperations[i].raw].amount;

                     } else if (bankoperations[i].amount > max){
                        obj[bankoperations[i].raw].max = bankoperations[i].amount;
                        obj[bankoperations[i].raw].min = obj[bankoperations[i].raw].amount;
                     }

                } else {
                    obj[bankoperations[i].raw] = bankoperations[i]; // si l'opération n'existe pas, on l'ajoute à la variable "obj"
                    min = bankoperations[i].amount;
                    max = bankoperations[i].amount;

                }
                if (bankoperations[i].date > obj[bankoperations[i].raw].date) {
                    obj[bankoperations[i].raw].date = bankoperations[i].date;
                }
                obj[bankoperations[i].raw].count = count;


            }

            var last2MonthsDate = new Date();
            last2MonthsDate.setMonth(last2MonthsDate.getMonth() - 2);

            var operations = [];
            for (var x in obj) {
                console.log("min :" + obj[x].min);
                if (obj[x].count > 2) {
                    if (obj[x].date >= last2MonthsDate) {
                        operations.push(obj[x]);
                    }
                }
            }

            res.status(200).json(operations);


        }
    });
});

// Export the router instance to make it available from other files.
module.exports = router;

